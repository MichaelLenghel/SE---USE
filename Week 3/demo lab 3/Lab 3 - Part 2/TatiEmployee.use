-- Example illustrating pre- and postconditions

model Employee

-- classes

class Person
	attributes
		name : String
		age : Integer
		income : Real
	operations
		salary(updatedSalary: Real) : Real
		begin
			self.income := self.income + updatedSalary;
			result := self.income
		end
end
	
class Company
	attributes
		name : String
		location : String
	operations
 		hire(person: Person, contract: Contract)
 		begin
			-- check if the person is not yet hired
			if self.contracts -> intersection(person.jobs) -> size() = 0 then
			    insert(self, contract) into isAt;
			    insert(person, contract) into WorksOn;
			    person.salary(contract.salary)
			end    
 		end
 
		fire(person: Person)
		begin
		    if self.contracts -> intersection(person.jobs) -> size() > 0 then
			contract : Contract -- will hold the only contract that this worker has with this company
			contract := self.contracts -> intersection(person.jobs)
			delete(self, contract) from isAt;
			delete(person, contract) from WorksOn;
			person.salary(-contract.salary) -- shrink the salary that was associated with this contract
		    end	
		end
end

class Contract
	attributes
		title: String
		salary: Real
	operations	
		raiseSalary(rate : Real)
		begin
			self.salary := self.salary + (self.salary * rate)	
		end
end

-- the person and a contract
association WorksOn between
	Person[1] role person
	Contract[*] role jobs
end

-- the contact and the company
association isAt between
	Company[1] role company
	Contract[1..*] role contracts
end


-- constraints

constraints

context Company:: hire(person : Person, contract: Contract)
	-- before a person is hired these has to be true
	pre personIsDefined: person.isDefined() -- the person must be a defined object
	-- he must not be hired on any previous job with this particulat company
	pre personIsNotYetHired: self.contracts -> intersection(person.jobs) -> size() = 0

	-- after a person has been hired, these have to be true
	-- these will be only one instance of this person, that is linked to this company through the contract object
	post personNowInHired :  self.contracts -> intersection(person.jobs) -> size() = 1
	-- after being hired a person salary must have at least 20000 increase.
	hireMinSalary : person.salary >= (person.salary@pre + 20000)


context Contract::raiseSalary(rate : Real) : Real
	-- the person associated with this contract has to be at leat 21 years or older
	pre RaiseSalaryAge : self.person.age >= 21
	-- If the contract has been raised, it must be updated to the person's Income
	post finalSalaryIsRaisedSalary:
        salary = salary@pre * (1.0 + rate)
	-- the person associated with this salary has to have his income updated
	self.person.salary = self.person.salary@pre + salary@pre * (1.0 + rate)

context Company::fire(person : Person)

	-- the person being fired must be hired in the first place. this set must not be empty
	pre employeeWasHired :  self.contracts -> intersection(person.jobs) -> size() = 1
	
        -- the person being fired's salary must be below 100k first, this has to be checked against the contract he has
        -- with this particular company. Because every Contract has a different salary
	contractSalary := self.contracts -> intersection(person.jobs)->salary -- this will return the salary amount
	pre  checkSalaryRange : contractSalary < 100000 -- check not above 100k
	-- If the person is fired there should be no contract left between them and this company
	post employeeNowFired:  self.contracts -> intersection(person.jobs) -> size() = 0
      -- after fired, they salary should drop to the amount they had from this contract
      	post salaryDroped: person.salary =person.salary@pre - salary -- minus the salary of the current contract
    