USE version 5.0.0, Copyright (C) 1999-2017 University of Bremen
use> open Employee.soil
Employee.soil> -- Script generated by USE 5.0.0
Employee.soil> 
Employee.soil> !new Person('joe')
Employee.soil> !new Person('tim')
Employee.soil> !new Company('microsoft')
Employee.soil> !new Company('ibm')
Employee.soil> !openter ibm hire(joe)
precondition `hirePre1' is true
precondition `hirePre2' is true
Employee.soil> !insert (joe,ibm) into WorksFor
Employee.soil> !opexit
postcondition `hirePost' is true
postcondition `startSal' is false
  p : Person = joe
  p.salary : OclVoid = Undefined
  (p.salary >= 20000) : OclVoid = Undefined
Error: postcondition false in operation call `Company::hire(self:ibm, p:joe)'.
Employee.soil> !openter ibm hire(tim)
precondition `hirePre1' is true
precondition `hirePre2' is true
Employee.soil> !insert (tim,ibm) into WorksFor
Employee.soil> !opexit
postcondition `hirePost' is true
postcondition `startSal' is false
  p : Person = tim
  p.salary : OclVoid = Undefined
  (p.salary >= 20000) : OclVoid = Undefined
Error: postcondition false in operation call `Company::hire(self:ibm, p:tim)'.
Employee.soil> !openter microsoft hire(joe)
precondition `hirePre1' is true
precondition `hirePre2' is true
Employee.soil> !insert (joe,microsoft) into WorksFor
Employee.soil> !opexit
postcondition `hirePost' is true
postcondition `startSal' is false
  p : Person = joe
  p.salary : OclVoid = Undefined
  (p.salary >= 20000) : OclVoid = Undefined
Error: postcondition false in operation call `Company::hire(self:microsoft, p:joe)'.
Employee.soil> !openter ibm fire(joe)
precondition `firePre' is true
Employee.soil> !delete (joe,ibm) from WorksFor
Employee.soil> !opexit
postcondition `firePost' is true
Employee.soil> !tim.salary := 20000
Employee.soil> !joe.salary := 40000
Employee.soil> !openter tim raiseSalary(0.1)
precondition `assertAge' is false
Error: precondition false in operation call `Person::raiseSalary(self:tim, rate:0.1)'.
Employee.soil> !tim.salary := 22000
Employee.soil> !opexit 22000
Error: No current operation
Employee.soil> !openter joe raiseSalary(0.1)
precondition `assertAge' is false
Error: precondition false in operation call `Person::raiseSalary(self:joe, rate:0.1)'.
Employee.soil> !joe.salary := 44000
Employee.soil> !opexit 42000
Error: No current operation
Employee.soil> !new Person('bob')
Employee.soil> !bob.age := 20
Employee.soil> !insert (bob,ibm) into WorksFor
Employee.soil> !openter bob raiseSalary(0.1)
precondition `assertAge' is false
Error: precondition false in operation call `Person::raiseSalary(self:bob, rate:0.1)'.
Employee.soil> !opexit
Error: No current operation
Employee.soil> !new Person('anne')
Employee.soil> !openter ibm hire(anne)
precondition `hirePre1' is true
precondition `hirePre2' is true
Employee.soil> !opexit
postcondition `hirePost' is false
  self : Company = ibm
  self.employee : Set(Person) = Set{bob,tim}
  p : Person = anne
  self.employee->includes(p) : Boolean = false
postcondition `startSal' is false
  p : Person = anne
  p.salary : OclVoid = Undefined
  (p.salary >= 20000) : OclVoid = Undefined
Error: postcondition false in operation call `Company::hire(self:ibm, p:anne)'.
Employee.soil> !opexit
Error: No current operation
Employee.soil> !openter ibm hire(anne)
precondition `hirePre1' is true
precondition `hirePre2' is true
Employee.soil> !insert (anne,ibm) into WorksFor
Employee.soil> !opexit
postcondition `hirePost' is true
postcondition `startSal' is false
  p : Person = anne
  p.salary : OclVoid = Undefined
  (p.salary >= 20000) : OclVoid = Undefined
Error: postcondition false in operation call `Company::hire(self:ibm, p:anne)'.
Employee.soil> !anne.age := 21
Employee.soil> !anne.salary := 1000
Employee.soil> !openter anne raiseSalary(0.1)
precondition `assertAge' is true
Employee.soil> !anne.salary := 1100
Employee.soil> !opexit 1100
postcondition `raiseSalaryPost' is true
postcondition `resultPost' is true
Employee.soil> 
use> use> !openter microsoft hire(matt)
precondition `hirePre1' is true
precondition `hirePre2' is true
use> !insert (matt,microsoft) into WorksFor
use> !opexit
postcondition `hirePost' is true
postcondition `startSal' is false
  p : Person = matt
  p.salary : OclVoid = Undefined
  (p.salary >= 20000) : OclVoid = Undefined
Error: postcondition false in operation call `Company::hire(self:microsoft, p:matt)'.
use> !openter 
<input>:line 1:0 no viable alternative at input 'openter'
use> !openter microsoft hire(matt)
precondition `hirePre1' is true
precondition `hirePre2' is false
Error: precondition false in operation call `Company::hire(self:microsoft, p:matt)'.
use> !openter microsoft fire(matt)
precondition `firePre' is true
use> !delete (matt, microsoft) remove WorksFor
<input>:line 1:0 no viable alternative at input 'delete'
use> !delete (matt, microsoft) from WorksFor
use> !openter microsoft fire(matt)
precondition `firePre' is false
Error: precondition false in operation call `Company::fire(self:microsoft, p:matt)'.
use> !openter microsoft hire(matt)
precondition `hirePre1' is true
precondition `hirePre2' is true
use> !insert (matt, microsoft) into WorksFor
use> !matt.salary := 1000
use> !opexit
postcondition `hirePost' is true
postcondition `startSal' is false
  p : Person = matt
  p.salary : Integer = 1000
  20000 : Integer = 20000
  (p.salary >= 20000) : Boolean = false
Error: postcondition false in operation call `Company::hire(self:microsoft, p:matt)'.
use> !openter insert (matt, microsoft) into WorksFor
<input>:line 1:0 no viable alternative at input 'openter'
use> !openter ibm hire(matt)
precondition `hirePre1' is true
precondition `hirePre2' is true
use> !openter microsoft hire(matt)
precondition `hirePre1' is true
precondition `hirePre2' is false
Error: precondition false in operation call `Company::hire(self:microsoft, p:matt)'.
use> !matt.salary := 19999
use> !opexit
postcondition `hirePost' is false
  self : Company = ibm
  self.employee : Set(Person) = Set{anne,bob,tim}
  p : Person = matt
  self.employee->includes(p) : Boolean = false
postcondition `startSal' is false
  p : Person = matt
  p.salary : Integer = 19999
  20000 : Integer = 20000
  (p.salary >= 20000) : Boolean = false
Error: postcondition false in operation call `Company::hire(self:ibm, p:matt)'.
use> !openter matt.salary := 20000
<input>:line 1:0 no viable alternative at input 'openter'
use> !matt.salary := 20000
use> !opexit
postcondition `firePost' is false
  self : Company = microsoft
  self.employee : Set(Person) = Set{joe,matt}
  p : Person = matt
  self.employee->excludes(p) : Boolean = false
Error: postcondition false in operation call `Company::fire(self:microsoft, p:matt)'.
use> !openter insert (matt, microsoft) into WorksFor
<input>:line 1:0 no viable alternative at input 'openter'
use> !openter microsoft hire(matt)
precondition `hirePre1' is true
precondition `hirePre2' is false
Error: precondition false in operation call `Company::hire(self:microsoft, p:matt)'.
use> !openter microsoft fire(matt)
precondition `firePre' is true
use> !microsoft.fire(matt)
<input>:1:0: Operation `Company::fire' is not defined by a soil statement.
use> ! delete (matt, mircosoft) from WorksFor
<input>:1:0: Variable `mircosoft' in expression `mircosoft' is undefined.
use> !delete (matt, mircosoft) from WorksFor
<input>:1:0: Variable `mircosoft' in expression `mircosoft' is undefined.
use> !delete (matt, microsoft) from WorksFor
use> !opexit
postcondition `firePost' is true
use> !matt.salary := 0
use> !openter microsoft hire(matt(
<input>:line 1:0 no viable alternative at input 'openter'
use> !openter microsoft hire(matt)
precondition `hirePre1' is true
precondition `hirePre2' is true
use> !insert (matt, microsoft) into WorksFor
use> !matt.salary := 20000
use> !opexit
postcondition `hirePost' is true
postcondition `startSal' is true
use> 